

#############
# Verilator #
#############

include mk/Common.mk

VLT_TOP_MODULE ?= redmule_tb
#VLT_TOP_MODULE = tb_top_verilator

###
#CV_CORE      ?= CV32E40P

#num_cores := $(shell nproc)
#num_cores_half := $(shell echo "$$(($(num_cores) / 2))")

#CORE_V_VERIF      := $(shell git rev-parse --show-toplevel)


# Test-Program directores.

TEST               ?= redmule
TEST_FILES         ?= $(TEST).c
TEST_TEST_DIR     = $(CORE_V_VERIF)/sw

#  -Core Firmware and the RISCV GCC Toolchain (SDK)


# Common output directories
RUN_INDEX                ?= 0
SIM_RESULTS              ?= simulation_results
SIM_TEST_RESULTS         = $(SIM_RESULTS)/$(TEST)
SIM_RUN_RESULTS          = $(SIM_TEST_RESULTS)/$(RUN_INDEX)
SIM_TEST_PROGRAM_RESULTS = $(SIM_RUN_RESULTS)/test_program
SIM_BSP_RESULTS          = $(CORE_V_VERIF)/sw/build/bsp
#####
VERI_LOG_DIR      ?= $(mkfile_path)/log/$(VLT_TOP_MODULE)
SIM_TEST_INPUTS   ?= $(mkfile_path)/vsim
BIN_DIR           = $(mkfile_path)/bin/$(VLT_TOP_MODULE)
VERI_FLAGS        +=



.PHONY: veri-clean 

# Clean all build directories and temporary files for Questasim simulation
veri-clean: 
	rm -f manifest.flist
	make -C sim/core -f Makefile.verilator CV_CORE_MANIFEST=${CURDIR}/manifest.flist  SIM_RESULTS=$(BIN_DIR) $@

verilate: $(BIN_DIR)/verilator_executable

manifest.flist: Bender.yml
	$(BENDER) script verilator $(common_targs) $(VLT_BENDER)  >$@
	touch $@

$(BIN_DIR)/verilator_executable: manifest.flist
	mkdir -p $(dir $@)
	make -C sim/core -f Makefile.verilator CV_CORE_MANIFEST=${CURDIR}/manifest.flist  SIM_RESULTS=$(BIN_DIR) VLT_TOP_MODULE=$(VLT_TOP_MODULE) verilate

sanity-veri-run: VLT_TOP_MODULE := tb_top_verilator
sanity-veri-run:
	mkdir -p $(VERI_LOG_DIR)
	rm -f $(VERI_LOG_DIR)/verilator_tb.vcd
	make -C sim/core -f Makefile.verilator CV_CORE_MANIFEST=${CURDIR}/manifest.flist  SIM_RESULTS=$(BIN_DIR) VLT_TOP_MODULE=$(VLT_TOP_MODULE) TEST=hello-world run-test
	mv sim/core/verilator_tb.vcd $(VERI_LOG_DIR)/

.PHONY: run-test
run-test: $(BIN_DIR)/verilator_executable 
	@echo "$(BANNER)"
	@echo "* Running with Verilator: $(BIN_DIR)/verilator_executable "
	@echo "*                         logfile in $(VERI_LOG_DIR)/$(TEST).log"
	@echo "*                         *.vcd   in $(VERI_LOG_DIR)"
	@echo "$(BANNER)"
	mkdir -p $(VERI_LOG_DIR)
	rm -f $(VERI_LOG_DIR)/verilator_tb.vcd
	$(BIN_DIR)/verilator_executable  \
		$(VERI_FLAGS) \
		"+firmware=$(SIM_TEST_INPUTS)/stim_instr.txt" \
		"+simdata=$(SIM_TEST_INPUTS)/stim_data.txt" \
		| tee $(VERI_LOG_DIR)/$(TEST).log
	mv verilator_tb.vcd $(VERI_LOG_DIR)/


.PHONY: veri-test
veri-test: $(BIN_DIR)/verilator_executable 
	@echo "$(BANNER)"
	@echo "* Running with Verilator: "
	@echo "*                         logfile in $(VERI_LOG_DIR)/$(TEST).log"
	@echo "*                         *.vcd   in $(VERI_LOG_DIR)"
	@echo "$(BANNER)"
	mkdir -p $(VERI_LOG_DIR)
	rm -f $(VERI_LOG_DIR)/verilator_tb.vcd
	$(BIN_DIR)/verilator_executable  \
		$(VERI_FLAGS) \
		"+firmware=/home/dan/ext/tristan-project/redmule/sw/build/verif" \
		"+simdata=$(SIM_TEST_INPUTS)/stim_data.txt" \
		| tee /home/dan/ext/tristan-project/redmule/log/tb_redmule_verilator/verif.log
	mv verilator_tb.vcd $(VERI_LOG_DIR)/	

	
.PHONY: help

help:
	@echo "verilator related available targets:"
	@echo verilate                                 -- builds verilator simulation, available here: $(BIN_DIR)/verilator_executable
	@echo run-test                                 -- runs the test
	@echo veri-clean                               -- gets a clean slate for simulation
	@echo verilate VLT_TOP_MODULE=tb_top_verilator
	@echo sanity-veri-run                          -- smoke test for $(BIN_DIR)/verilator_executable, only with  VLT_TOP_MODULE=tb_top_verilator





#$(SIM_TEST_INPUTS)/$(TEST).elf:
#test_app.elf:
#	@echo "$(BANNER)"
#	@echo "* Compiling the test $@"
#	@echo "$(BANNER)"
#	mkdir -p $(SIM_BSP_RESULTS)
#	cp $(BSP)/Makefile $(SIM_BSP_RESULTS)
#	$(warning $@)
#	$(warning TEST_PROGRAM_SRCS=$(TEST_PROGRAM_SRCS))
#	$(warning MAIN_C_FILE=$(MAIN_C_FILE))
#	make -C $(SIM_BSP_RESULTS) \
		APP_FILES=$(MAIN_C_FILE)    \
		VPATH=$(TEST_PROGRAM_SRCS):$(BSP) \
		RISCV=$(RISCV) \
		RISCV_PREFIX=$(RISCV_PREFIX) \
		RISCV_EXE_PREFIX=$(RISCV_EXE_PREFIX) \
		RISCV_MARCH=$(RISCV_MARCH) \
		RISCV_CC=$(RISCV_CC) \
		RISCV_CFLAGS="$(RISCV_CFLAGS)" \
		LD_FILE=$(BSP)/link.ld \
		$@


#test_app.elf: $(SIM_TEST_INPUTS)/$(TEST).elf		


sim-inputs: $(VSIM_DIR) $(SIM_TEST_INPUTS)/$(TEST).hex 
#	rm -fr   $(SIM_TEST_INPUTS)
#	mv $(SIM_BSP_RESULTS)/*.hex $(SIM_TEST_INPUTS)/$(TEST).hex 
#	mv $(SIM_BSP_RESULTS)/*.elf $(SIM_TEST_INPUTS)/$(TEST).elf
	objcopy --srec-len 1 --output-target=srec  --srec-forceS3 $(SIM_TEST_INPUTS)/$(TEST).elf $(SIM_TEST_INPUTS)/$(TEST).s19
	scripts/parse_s19.pl $(SIM_TEST_INPUTS)/$(TEST).s19 > $(SIM_TEST_INPUTS)/$(TEST).txt 2>$(BUILD_DIR)/parse_s19.pl.log
	python scripts/s19tomem.py $(SIM_TEST_INPUTS)/$(TEST).txt  $(STIM_INSTR) $(STIM_DATA) 